<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-oliver-pluggable-transports" category="info">

  <front>
    <title abbrev="Pluggable Transports">Enabling Network Traffic Obfuscation - Pluggable Transports</title>

    <author initials="." surname="David Oliver" fullname="David M. Oliver">
      <organization>Guardian Project</organization>
      <address>
        <email>david@guardianproject.info</email>
        <uri>https://guardianproject.info</uri>
      </address>
    </author>

    <date year="2019" month="June" day="26"/>

    <area>General</area>
    <workgroup>Transport Working Group</workgroup>
    <keyword>circumvention</keyword>

    <abstract>


<t>Pluggable Transports (PTs) are a mechanism enabling the rapid development and 
deployment of network traffic obfuscation techniques used to circumvent
surveillance and censorship. This specification does
not define or limit the techniques themselves, but rather focuses 
on the startup, shutdown, and inter-process communication mechanisms 
required to make these technologies interoperable with applications.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The increased interest in network traffic obfuscation technologies mirrors the 
increase in usage Deep Packet Inspection (DPI) to actively monitor the content 
of application data in addition to that data’s routing information.  Deep Packet 
Inspection inspects each packet based on the header of its request and the 
data it carries. It can identify the type of protocol the connection is 
using even if it was encrypted. DPI is not a mechanism to decrypt what is 
inside packets but to identify the ‘protocol’ or the application it represents.</t>

<t>Deep packet inspection has become the prime tool of censors and surveillance entities who 
block, log and/or traffic-shape access to sites and services they deem undesirable.<vspace />
As deep packet inspection has become more routine, the sophistication of monitoring 
has increased to include active probing that fingerprints and classifies application 
protocols.  Thus, even as conventional care in application design has improved
(via encryption and other protocol design features that encourage privacy), 
network traffic is still under attack.</t>

<t>The techniques of network monitoring are changing and improving
day by day.  The development of traffic obfuscation techniques that foil these 
efforts is slowed by the lack of common agreement on how these techniques are invoked, 
made easily interoperable with applications, and deployed quickly.  This 
specification addresses those issues.</t>

<figure><artwork><![CDATA[
    <!-- taken largely from PT1 spec --> This specification describes a method for decoupling protocol-level obfuscation from  an application's client/server code, in a manner that promotes rapid development  of obfuscation/circumvention tools and promotes reuse across privacy tools such as VPNs and secure proxies.
]]></artwork></figure>

<t>This decoupling is accomplished by utilizing helper sub-processes that implement the 
necessary forward/reverse proxy servers that handle the censorship circumvention, 
with a well defined and standardized configuration and management interface. Any 
application code that implements the interfaces as specified in this document 
will be able to use all spec compliant Pluggable Transports.</t>

</section>
<section anchor="background" title="Background">

<t>We define an Internet censor as any network intermediary that seeks to block, divert or 
traffic-manage Internet network connections for the purpose of eliminating, frustrating
and/or logging access to Internet resources that have been deemed (by the censor) 
to be undesirable (either on a temporary or permanent basis).  A variety of 
techniques are commonly applied by Internet censors to block such traffic.  These include:</t>

<t><list style="numbers">
  <t>DNS Blocking</t>
  <t>IP Blocking</t>
  <t>Protocol and Port Blocking</t>
</list></t>

<t>These techniques are applicable to a connection’s metadata (IP routing information)
and do not require inspecting the connection’s datastream.</t>

<t>DPI, in contrast, actually looks at the connection’s datastream - often, specifically, 
the initial data elements in the stream (or within blocks of the stream).  These 
elements of the stream can contain clues 
as to the application-level protocol employed, even when the data itself is 
encrypted.  With repeated exposure, these clues (“fingerprints”) can be learned by
the censor and (along with the routing information) used to block or divert 
targeted traffic.</t>

<t>A defense against this type of active probing is traffic obfuscation - disguising
the application data itself in a manner that is less-easily fingerprinted.  But in
early experiments, it quickly became clear that repeated use of the same 
obfuscation technique would, itself, be learned. Methods were developed 
by which a single obfuscation technique could transform on its own [cite FTE 
proxy, ScrambleSuit].  But, this approach proved expensive in terms of 
computational load.  Interest gathered in solving this problem and as more ideas
arose so to did the need for a mechanism supporting rapid deploying of new 
obfuscation techniques.</t>

<t>While intense work on network traffic obfuscation commenced initially and continues within
the Tor Project (and across a wider set of external parties using Tor as a vehicle 
for research), vendors of other privacy-enhancing software (such as VPNs) quickly found 
their products also foiled by DPI.  Thus, it becomes important to see
transport plug-ability as a mechanism implemented in a manner independent of a 
specific product or service.  The notion of “Pluggable Transports” (PT) was born from
these requirements.</t>

</section>
<section anchor="architecture-overview" title="Architecture Overview">

<t>The PT Server software exposes a public proxy that accepts connections from PT Clients. 
The PT Client transforms the traffic before it hits the public Internet and the PT 
Server reverses this transformation before passing the traffic on to its next destination. 
By default, the PT Server directly forwards this data to the Server App, but the 
Server App itself may itself be a proxy server and expect the forwarded traffic it 
receives to conform to a proxy communication protocol such as SOCKS or TURN. There is 
also an optional lightweight protocol to facilitate communicating connection metadata 
that would otherwise be lost such as the source IP address and port [EXTORPORT].</t>

<t>When using the API on both client and server (“Transport API Interface”), the PT Client 
Library is integrated directly into the Client App and the PT Server Library is integrated 
directly into the Server App. The Client App and Server App communicate through 
socket-like APIs, with all communication between them going through the PT library, 
which only sends transformed traffic over the public Internet.</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +-- Socket-like API --+ PT Client (Library)       +--+ 
  +------------+                     +---------------------------+  |
                                                                    | 
               Public Internet (Obfuscated/Transformed traffic) ==> | 
                                                                    | 
  +------------+                       +-------------------------+  | 
  | Server App +--  Socket-like API  --+ PT Server (Library)     +--+
  +------------+                       +-------------------------+
  
           Figure 1. API Architecture Overview
]]></artwork></figure>

<t>When using the transports as a separate process on both client and server, 
the Dispatcher IPC Interface is used. On the client device, the PT Client 
software exposes a local proxy to the client application, and transforms traffic 
before forwarding it to the PT Server. The PT Dispatcher can be configured to 
provide different proxy types, supporting proxying of both TCP and UDP traffic.</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +---- Local Proxy ----+ PT Client (Dispatcher)    +--+ 
  +------------+                     +---+-------------------+---+  |
                                       | PT Client Library |        |
                                       +-------------------+        |
                                                                    |
             Public Internet (Transformed/Proxied traffic) =====>   |
                                                                    |
  +------------+                     +---------------------------+  |
  | Server App +---- Local Proxy ----+ PT Server (Dispatcher )   +--+
  +------------+                     +---+-------------------+---+ 
                                         |PT Server (Library)| 
                                         +-------------------+

        Figure 2. IPC Architecture Overview
]]></artwork></figure>

<t>A PT may also be function via Dispatcher IPC on one end of the connection but via 
Transport API on the other, as below (or vice-versa):</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +---- Local Proxy ----+ PT Dispatcher Client      +-+ 
  +------------+                     +---+-------------------+---+ |
                                                                   |
                                                                   |
  +------------+                     +--------------------------+  | 
  | Server App +-- Socket-like API --+ PT Server (Library )     +--+ 
  +------------+                     +--------------------------+

        Figure 3. Mixed IPC and Transport API example
]]></artwork></figure>

<t>Each invocation of a PT MUST be either a client OR a server.</t>

<t>PT dispatchers MAY support any of the following proxy modes: PT 1.0 with SOCKS4, 
PT 1.0 with SOCKS5, PT 2.0, transparent TCP, transparent UDP, or STUN-aware UDP. 
Clients SHOULD prefer PT 2.0 over PT 1.0.</t>

</section>
<section anchor="specification" title="Specification">

<section anchor="pluggable-transport-naming" title="Pluggable Transport Naming">

<t>Pluggable Transport names serve as unique identifiers, and every PT MUST have a unique name.
PT names MUST be valid C identifiers. PT names MUST begin with a letter or underscore, and the remaining characters MUST be ASCII letters, numbers or underscores. No length limit is imposed.
PT names MUST satisfy the regular expression “[a-zA-Z_][a-zA-Z0-9_]*”.</t>

</section>
<section anchor="transports-api-interface" title="Transports API Interface">

<section anchor="goals-for-interface-design" title="Goals for interface design">

<t>The goal for the interface design is to achieve the following properties:
- Transport implementers have to do the minimum amount of work in addition to
implementing the core transform logic.
- Transport users have to do the minimum amount of work to add PT support to code that
uses standard networking primitives from the language or platform.
- Transports require an explicit destination address to be specified. However, this can be
either an explicit PT server destination with the Server App is already known 
implicitly (the case with obfs4), or an explicit Server App destination with the PT server 
destination already known implicity (the case with meek).
- Transports may or may not generate, send, receive, store, and/or update persistent or 
ephemeral state.
* Transports that do not need persistence or negotiation can interact with the application 
through the simplest possible interface
* Transports that do need persistence or negotiation can rely on the application to 
provide it through the specified interface, so the transport does not need to 
implement persistence or negotiation internally.
- Applications should be able to use a PT Client implementation to establish several 
independent transport connections with different parameters, with a minimum of 
complexity and latency.
- The interface in each language should be idiomatic and performant, including 
reproducing blocking behavior and interaction with nonblocking IO subsystems when possible.</t>

</section>
<section anchor="abstract-interfaces" title="Abstract Interfaces">
<t>This section presents high-level pseudocode descriptions of the interfaces exposed 
by different types of transport components. Implementations for different languages 
should provide equivalent functionality, but should use the idioms for each language, 
mimicking the existing networking libraries.</t>

<section anchor="transport" title="Transport">
<t><list style="symbols">
  <t>Transport​ takes a ​transport configuration​ and provides a ​Client Factory​ and a 
Server Factory.</t>
  <t>Transports​ may provide additional language-specific configuration methods</t>
  <t>The only way to obtain ​Client Factories​ and ​Server Factories​ is from the
Transport​.</t>
  <t>The ​Server Factory​ of the ​Transport​ can fail if the Transport does not provide a
server-side implementation, such as in the case of the meek transport. However,
most transports provide both a client and server implementation.</t>
  <t>The ​transport configuration​ is specific to each T​ ransport​. Using a ​Transport
requires knowing the correct parameters to initialize that ​Transport.</t>
</list></t>

<section anchor="client-factory" title="Client Factory">
<t><list style="symbols">
  <t>Client Factory​ takes the ​connection settings​ and produces a ​Connection​ to that server.</t>
  <t>The ​connection settings​ are specific to each transport. Some transports will also require an argument indicating the ​destination endpoint​. Producing a Connection​ may fail if the server is unreachable or if the ​transport configuration​ was incorrect.
##### Server Factory</t>
  <t>Server Factory​ takes the address on which the PT server should listen for incoming client connections and produces a ​Listener​ for that address
##### Listener</t>
  <t>Listener​ produces a stream of ​Connections</t>
  <t>New ​Connections​ are available whenever an incoming connection from the PT
client has been established. The language-specific API can adopt either a blocking or non-blocking API for accepting new connections, depending on what is idiomatic for the language.
3.2.2.2. Connection</t>
  <t>Connection​ provides an API similar to the environment’s native socket type</t>
  <t>The connection object is extended to provide access to the underlying actual network socket used by the transport, so that low-level networking settings can be changed by the application.</t>
  <t>Connection​ is what is used to read and write data over the transport connection</t>
  <t>The transport-specific logic for obfuscating network traffic is implemented inside
the ​Connection.</t>
</list></t>

</section>
</section>
</section>
</section>
</section>
<section anchor="adapters" title="Adapters">
<t>This section covers the various different ways that the Pluggable Transport interfaces (both API and IPC) can be adapted to different use cases.</t>

<section anchor="api-to-ipc-adapter" title="API to IPC Adapter">
<t>When an application and the transports it uses are written in the same language, 
either the Transports API or Dispatcher IPC can be used. When they are in different 
languages, they must communicate through the Dispatcher IPC interface. For maximum 
flexibility and to minimize duplication of effort across languages, dispatcher can 
be implemented by wrapping transport implementations that implement the Transports 
API. For an example of this approach, see the Shapeshifter Dispatcher 
[​https://github.com/OperatorFoundation/shapeshifter-dispatcher]​ , which wraps 
transports implementing the Transports API in the Go language and provides a 
Dispatcher IPC interface to use them from other languages.</t>

</section>
<section anchor="pt-10-compatibility" title="PT 1.0 Compatibility">
<t>The only interface defined in the PT 1.0 specification is an IPC interface. No 
standard API is defined. Therefore, PT 1.0 compatibility refers to compatibility 
between applications and transports where one side conforms to the PT 1.0 specification 
and the other conforms to the PT 2.0 specification. Fortunately, an adapter is not 
needed in this case as both the PT 1.0 and PT 2.0 specifications allow for version 
negotiation. The TOR_PT_MANAGED_TRANSPORT_VER environment variable or -ptversion 
command line flag is used by the application to specify a list of supported versions, 
for instance “1.0,2.0”. The PT provider responds with the VERSION command on stdout in 
order to specify which version is supported by the PT provider, for instance 
“VERSION 2.0”. Since the application can specify a list of supported versions, the 
PT provider can respond dynamically, supporting PT 1.0 when required and automatically 
upgrading to a PT 2.0 implementation when that is an available option. It is up to 
applications whether they want to support PT 2.0 exclusively or maintain backwards 
compatibility with PT 1.0 implementations.</t>

</section>
<section anchor="cross-language-linking" title="Cross-language Linking">
<t>If two languages are compatible via cross-language linking, then a suitable adapter 
can be written that wraps the implementation of the Transports API in one language 
with an API for a compatible language. For example, on Android the Go implementation 
of the Transports API is wrapped in a Java API to create Java language bindings without 
the need for a native Java implementation or use of Dispatcher IPC.</t>

<section anchor="using-the-dispatcher-ipc-interface-in-process" title="Using the Dispatcher IPC Interface In-process">
<t>When using a transport that exposes the Dispatcher IPC interface, it may be more 
convenient to run the transport in a separate thread but in the same process as 
the application. Packets can still be routed through the transport’s SOCKS5 or
TURN port on localhost. However, it may be inconvenient or impossible to use STDIN 
and STDOUT for communication between these two threads. Therefore, in some languages 
it may be appropriate to produce an “inter-thread interface” that reproduces the 
Dispatcher IPC interface’s semantics, but replaces STDIN and STDOUT with language-native 
function-call and event primitives. This is the approach used by OnionBrowser 
[​https://mike.tig.as/onionbrowser/​], the Tor implementation on iOS. This approach 
is used because Tor uses the Dispatcher IPC mechanism to talk to the transports instead 
of the Transports API. However, iOS does not allow for applications to have multiple 
processes. Therefore, an in-process Dispatcher IPC approach must be used instead of 
traditional separate process Dispatcher IPC. An alternative would be to use the 
Transports API directly instead of Dispatcher IPC.</t>

</section>
</section>
<section anchor="anonymity-considerations" title="Anonymity Considerations">

<t>When designing and implementing a Pluggable Transport, care should be taken to preserve 
the privacy of clients and to avoid leaking personally identifying information.
Examples of client related considerations are:
- Not logging client IP addresses to disk.
- Not leaking DNS addresses except when necessary.
- Ensuring that “TOR_PT_PROXY”’s “fail closed” behavior is implemented correctly.</t>

<t>Additionally, certain obfuscation mechanisms rely on information such as the server IP 
address and port being confidential, so clients also need to take care to preserve 
server side information confidential when applicable.</t>

</section>
</section>
<section anchor="references" title="References">

<t>[RFC2119] Bradner, S., “Key words for use in RFCs to Indicate Requirement Levels”, BCP 14, RFC 2119, March 1997.</t>

<t>[RFC1928] Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., Jones, L., “SOCKS Protocol Version 5”, RFC 1928, March 1996.</t>

<t>[EXTORPORT] Kadianakis, G., Mathewson, N., “Extended ORPort and TransportControlPort”, Tor Proposal 196, March 2012.</t>

<t>[RFC3986] Berners-Lee, T., Fielding, R., Masinter, L., “Uniform Resource Identifier (URI): Generic Syntax”, RFC 3986, January 2005.</t>

<t>[RFC1929] Leech, M., “Username/Password Authentication for SOCKS V5”, RFC 1929, March 1996.</t>

<t>[PT2-DISPATCHER] Wiley, Brandon., Shapeshifter Dispatcher. https://github.com/OperatorFoundation/shapeshifter-dispatcher</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>Many people contributed to the PT 2.0 specification. Major contributions were made by 
Dr. Brandon Wiley (Operator Foundation), Nick Mathewson (Tor), and Ben Schwartz (Jigsaw). 
Valuable feedback was provided by the attendees at the Pluggable Transport Implementers 
Meetings and the traffic-obf and tor-dev mailing lists. The PT 2.0 specification expands 
upon the “Pluggable Transport Specification (Version 1)” document authored by Yawning 
Angel (Tor). Inspiration for the PT 2.0 Go API was also inspired by the obfs4proxy 
implementation of the PT 1.0 specification in Go, also developed by Yawning Angel (Tor).</t>

</section>
<section anchor="appendix-a-changelog" title="Appendix A. Changelog">
<t>## PT 2.1, Draft 1
- Implemented proposal 0002 - Modularization of Specification</t>

<section anchor="pt-20-draft-3" title="PT 2.0, Draft 3">
<t><list style="symbols">
  <t>Expanded acknowledgements section</t>
</list></t>

</section>
<section anchor="pt-20-draft-2" title="PT 2.0, Draft 2">
<t><list style="symbols">
  <t>Reworded introduction</t>
  <t>Removed unused Javascript and Python APIs</t>
  <t>Removed SSH transport example</t>
  <t>Standardized use of Transports API and Dispatcher IPC language throughout</t>
</list></t>

</section>
</section>


  </middle>

  <back>





  </back>

<!-- ##markdown-source:
H4sIAKYGFF0AA8VcX3Mjt5F/x6fAaR8ixSR3V45zWdXl6rTaP1bslVQS147P
teUCZ0ByouEMM5gRly4/+P2+wKUq+XL+JPfrbgCDoai1HTt1m6qY4mAaje5G
968bDY7HY9UWbWlP9MvKzMqiWugL227q5lZPGzOfF5m+nM07l5m2qCs91ldl
t1hgpKXnlVvXTeuUmc0ae3ey/2FeZ5VZYYYcBNtxXRZ3thmvw9Bx2w/FLHZR
N9sTXVTzWqli3Zzotulce/zkybMnx8o01pzo17ayjSkVsblo6m590s+nv8SX
tIzX9EDd2i1G5Sf6vGptU9l2/IK46L+f1k3/R2RKR6b6hyZrwbleN/UM9Pvv
Wy8nU5ly6wrXP8ls5erGLYuEj6xosm51ZyuSp1KuNVX+jSnrCgLaWqfWxYn+
uq2zkcarbWPnDp+2K/rwTinTtcu6OVF6rDT+FZU70QcvzF2R60uW6wF/L/L2
D95MBs/qZmGq4lvWJ8a87kyTF6bSV039F5u1MsiuTFFCY0TgvxZ+yFpGTFg3
NKprwOyybdfu5PHjvaNUVTcrQ3I7gTbxTf/XeDzWZuYgvaxVap/l6MOrqTvS
0Lk2emWzJfh2K22DobZLqxuzxhJze2fLer2CVKGGXKvcrst6y3/Xc115iw6a
qhOLbkG3Kv7aWac7Z3Pd1omKlOuaO1uUpakyy5R7lU70dFk47dY2K0BUqOU1
VFjVLTiaF5WFsHVZrIqWeU2mwp8rZ8s7C+3OuhbLwDeNntcZmHBaEWN4A9bR
tN0aFrDs2rzeVCNmoiBbHkPQmXVOZ/Vq1VWBgygnUGnsX7uikUWtzK0lms7z
UZf1osBUTKteYz+R8DdFu9RmvS49OTcRRa2KPC+tUo9oHzV13mVivlMwWVQZ
diXJjmlZ1+LDj8s8MLAqmgYS5fWqQIsodM4srH5h7VpfmezWtpibpM0kDl9c
nR/RumRXllu9qquihbyJTlaDE+heQfnJamDPrSHSJs8L4aTGeNPyg984DZfR
kmVFS62riR6woBIeCvnotDXZUq9lwIwl4fW3tCaHWsFFgWGkDpIOqZBXK+y0
OjNNA1FM9Dl9BuGc3MN8K1azXVuiAHXDLdRlWGAVuICiO0dcYxPgT5pLbwy4
giy369bmEw1h0TgyzHQnYfW55UF6Q1IgUlgUpvercWycGDbg6Ifv/zcw88P3
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

-->

</rfc>

